Parameters:
    EnvironmentName:
        Type: String

Resources:
    ApacheServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "Security group for Udagram Apache server"
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                -
                    IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
                # -
                #     IpProtocol: tcp
                #     FromPort: 22
                #     ToPort: 22
                #     CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                -
                    IpProtocol: tcp
                    FromPort: 0
                    ToPort: 65535
                    CidrIp: 0.0.0.0/0

    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "Security group for Udagram Load Balancer"
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                -
                    IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                -
                    IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0

    UdagramS3ReadOnlyManagedPolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Sid: "UdagramS3ReadOnlyAccess"
                        Effect: "Allow"
                        Action:
                            - "s3:Get*"
                            - "s3:List*"
                        Resource: "*"

    UdagramS3ReadOnlyRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Service:
                                - "ec2.amazonaws.com"
                        Action:
                        - 'sts:AssumeRole'
            ManagedPolicyArns:
                - !Ref UdagramS3ReadOnlyManagedPolicy

    UdagramS3ReadOnlyInstanceProfile:
        Type: 'AWS::IAM::InstanceProfile'
        Properties:
            Roles:
                - !Ref UdagramS3ReadOnlyRole

    ApacheServerLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            # KeyName: "udagram"
            ImageId: "ami-005bdb005fb00e791"
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update
                    DEBIAN_FRONTEND=noninteractive apt-get install -y apache2 awscli
                    systemctl start apache2.service
                    aws s3 cp s3://udacity-devopsnd-project-2/index.html .
                    mv index.html /var/www/html/
            SecurityGroups:
                -
                    Ref: ApacheServerSecurityGroup
            InstanceType: "t2.medium"
            IamInstanceProfile:
                Ref: "UdagramS3ReadOnlyInstanceProfile"
            BlockDeviceMappings:
                -
                    DeviceName: /dev/sda1
                    Ebs:
                        VolumeSize: 10

    ApacheServerTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 15
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 3
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

    ApacheServerScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                -
                    Fn::ImportValue:
                        !Sub "${EnvironmentName}-PRVSUBS"
            LaunchConfigurationName:
                Ref: ApacheServerLaunchConfig
            MinSize: 4
            MaxSize: 8
            TargetGroupARNs:
                - Ref: ApacheServerTargetGroup

    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUBSUB1a"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUBSUB1b"
            SecurityGroups:
                - Ref: LoadBalancerSecurityGroup

    LoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                -
                    Type: forward
                    TargetGroupArn:
                        Ref: ApacheServerTargetGroup
            LoadBalancerArn:
                Ref: LoadBalancer
            Port: 80
            Protocol: HTTP

    LoadBalancerListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                -
                    Type: forward
                    TargetGroupArn: !Ref ApacheServerTargetGroup
            Conditions:
                -
                    Field: path-pattern
                    Values: [/]
            ListenerArn: !Ref LoadBalancerListener
            Priority: 1

Outputs:
    StackLoadBalancerURL:
        Value: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName]]
        Export:
            Name: !Sub ${EnvironmentName}-DNSNAME
